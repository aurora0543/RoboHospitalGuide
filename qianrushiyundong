#include <gpiod.h>
#include <iostream>
#include <atomic>
#include <thread>
#include <chrono>
#include <csignal>

// 直流电机 GPIO 引脚
constexpr unsigned int AIN1 = 17;
constexpr unsigned int AIN2 = 18;
constexpr unsigned int BIN1 = 22;
constexpr unsigned int BIN2 = 23;

// 舵机 GPIO 引脚
constexpr unsigned int SERVO_PIN = 24;

// PWM 相关参数
constexpr int PWM_FREQUENCY = 1000;   // 直流电机 PWM 频率 (Hz)
constexpr int PWM_RESOLUTION = 100;   // 直流电机 PWM 占空比分辨率
constexpr int SERVO_FREQUENCY = 50;   // 舵机 PWM 频率 (Hz)
constexpr int SERVO_PERIOD_US = 20000;// 舵机 PWM 周期（20ms）
constexpr int SERVO_MIN_US = 1000;    // 舵机最小脉宽（1ms，0°）
constexpr int SERVO_MAX_US = 2000;    // 舵机最大脉宽（2ms，180°）

// 全局变量
struct gpiod_chip* chip = nullptr;
struct gpiod_line* line_AIN1 = nullptr;
struct gpiod_line* line_AIN2 = nullptr;
struct gpiod_line* line_BIN1 = nullptr;
struct gpiod_line* line_BIN2 = nullptr;
struct gpiod_line* line_SERVO = nullptr;
std::atomic<bool> running{true};

// 退出信号处理
void signalHandler(int signal) {
    std::cout << "\n停止电机和舵机..." << std::endl;
    running = false;
    std::this_thread::sleep_for(std::chrono::milliseconds(100));

    gpiod_line_set_value(line_AIN1, 0);
    gpiod_line_set_value(line_AIN2, 0);
    gpiod_line_set_value(line_BIN1, 0);
    gpiod_line_set_value(line_BIN2, 0);
    gpiod_line_set_value(line_SERVO, 0);

    if (line_AIN1) gpiod_line_release(line_AIN1);
    if (line_AIN2) gpiod_line_release(line_AIN2);
    if (line_BIN1) gpiod_line_release(line_BIN1);
    if (line_BIN2) gpiod_line_release(line_BIN2);
    if (line_SERVO) gpiod_line_release(line_SERVO);
    if (chip) gpiod_chip_close(chip);

    exit(0);
}

// 初始化 GPIO
void setupGPIO() {
    chip = gpiod_chip_open_by_name("gpiochip0");
    if (!chip) throw std::runtime_error("无法打开 GPIO 芯片！");

    line_AIN1 = gpiod_chip_get_line(chip, AIN1);
    line_AIN2 = gpiod_chip_get_line(chip, AIN2);
    line_BIN1 = gpiod_chip_get_line(chip, BIN1);
    line_BIN2 = gpiod_chip_get_line(chip, BIN2);
    line_SERVO = gpiod_chip_get_line(chip, SERVO_PIN);

    if (!line_AIN1 || !line_AIN2 || !line_BIN1 || !line_BIN2 || !line_SERVO) {
        throw std::runtime_error("无法获取 GPIO 线！");
    }

    gpiod_line_request_output(line_AIN1, "motor", 0);
    gpiod_line_request_output(line_AIN2, "motor", 0);
    gpiod_line_request_output(line_BIN1, "motor", 0);
    gpiod_line_request_output(line_BIN2, "motor", 0);
    gpiod_line_request_output(line_SERVO, "servo", 0);
}

// 直流电机 PWM 控制
void pwmControl(int dutyCycle, bool forward, gpiod_line* pin1, gpiod_line* pin2) {
    int period_us = 1000000 / PWM_FREQUENCY;
    int high_time_us = (period_us * dutyCycle) / PWM_RESOLUTION;

    while (running) {
        gpiod_line_set_value(pin1, forward ? 1 : 0);
        gpiod_line_set_value(pin2, forward ? 0 : 1);

        if (high_time_us > 0) std::this_thread::sleep_for(std::chrono::microseconds(high_time_us));
        if (dutyCycle < 100) {
            gpiod_line_set_value(pin1, 0);
            gpiod_line_set_value(pin2, 0);
            std::this_thread::sleep_for(std::chrono::microseconds(period_us - high_time_us));
        }
    }

    gpiod_line_set_value(pin1, 0);
    gpiod_line_set_value(pin2, 0);
}

// 舵机控制
void servoControl(int angle) {
    if (angle < 0) angle = 0;
    if (angle > 180) angle = 180;

    int pulse_width = SERVO_MIN_US + ((SERVO_MAX_US - SERVO_MIN_US) * angle / 180);
    while (running) {
        gpiod_line_set_value(line_SERVO, 1);
        std::this_thread::sleep_for(std::chrono::microseconds(pulse_width));
        gpiod_line_set_value(line_SERVO, 0);
        std::this_thread::sleep_for(std::chrono::microseconds(SERVO_PERIOD_US - pulse_width));
    }
}

int main() {
    signal(SIGINT, signalHandler);
    signal(SIGTERM, signalHandler);

    try {
        setupGPIO();

        // 直流电机参数
        int dutyCycleA = 50;
        int dutyCycleB = 30;
        bool motorA_forward = true;
        bool motorB_forward = false;

        // 启动直流电机 PWM 线程
        std::thread motorA(pwmControl, dutyCycleA, motorA_forward, line_AIN1, line_AIN2);
        std::thread motorB(pwmControl, dutyCycleB, motorB_forward, line_BIN1, line_BIN2);

        // 舵机转向 90°
        std::thread servoThread(servoControl, 90);

        std::cout << "电机和舵机已启动，按 Ctrl+C 停止..." << std::endl;

        motorA.join();
        motorB.join();
        servoThread.join();
    } catch (const std::exception& e) {
        std::cerr << "错误: " << e.what() << std::endl;
        return 1;
    }

    return 0;
}
